from config import bot, Dispatcher, test
from aiogram.dispatcher import FSMContext
from aiogram import types
import random


# –†–∞–∑–≤–µ—Ä—Ç–∫–∞ –º–µ–Ω—é –∏–≥—Ä----------------------------------------------------------------------------------------------------
async def game_menu(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id,callback.message.message_id)
    item1 = types.InlineKeyboardButton('üêä Crocodile', callback_data='crocodile')
    item2 = types.InlineKeyboardButton('Word Game', callback_data='word_game')
    item3 = types.InlineKeyboardButton('‚¨Ö Back to menu', callback_data='back_menu')
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(item1, item2, item3)
    await callback.message.answer('–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä', reply_markup=markup)
#-----------------------------------------------------------------------------------------------------------------------


# –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞----------------------------------------------------------------------------------------------------------
async def word_game(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    item1 = types.InlineKeyboardButton('–î–∞, –ø–æ–µ—Ö–∞–ª–∏', callback_data='heaad_word_game')
    item2 = types.InlineKeyboardButton('‚¨Ö Back to menu', callback_data='back_menu')
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(item1, item2)
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –º–µ–Ω—é –∏–Ω—Ä—ã –≤ —Å–ª–æ–≤–∞, –ø—Ä–∞–≤–∏–ª–∞...\n'
                                  '–¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ –≤–µ—Ä–Ω–µ—à—å—Å—è –Ω–∞–∑–∞–¥?', reply_markup=markup)


async def head_word_game(callback: types.CallbackQuery):
    await bot.send_message(callback.message.chat.id, '–ù—É –µ—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω, —Ç–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π. \n'
                                                     'p.s(–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)')
    await test.test1.set()


async def start_words_game(message: types.Message, state: FSMContext):
    str = message.text[-1].upper()
    with open(f'./Game/Words_to_words_game/{str}.txt', encoding='utf-8') as inp:
        letter = inp.readlines()
    i = random.randint(1, len(letter))
    str1 = letter[i].split('\t')
    str1[0] = str1[0][-1]
    await bot.send_message(message.chat.id, letter[i])
    await bot.send_message(message.chat.id, f'–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å, —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—Å—è –Ω–∞ <b><u>{str1[0]}</u></b>'
                                            f'', parse_mode='html')
    # await state.update_data(test1=str1)
    await test.test2.set()


# async def body_words_game(message: types.Message, state: FSMContext):
#     await bot.send_message(message.chat.id, str1)





    # # def game_word(message):
    # #     str = message.text[-1].upper()
    #     with open(f'./Game/Words_to_words_game/{str}.txt', encoding='utf-8') as inp:
    #         letter = inp.readlines()
    #     i = random.randint(1, len(letter))
    #     msg = bot.send_message(message.chat.id, letter[i])
    #     bot.register_next_step_handler(msg, game_word)
    # #
    # def word_game(message):
    #     rmk = types.ReplyKeyboardMarkup()
    #     rmk.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
    #
    #     msg = bot.send_message(message.chat.id, "—ç—Ç–æ –∏–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞, —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=rmk)
    #     bot.register_next_step_handler(msg, start_word_game)
    #
    # def start_word_game(message):
    #     if message.text == "–ù–µ—Ç":
    #         Game(message)
    #     elif message.text == "–î–∞":
    #         msg = bot.send_message(message.chat.id, "–¢–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π, —Ç–≤–æ–π —Ö–æ–¥")
    #         bot.register_next_step_handler(msg, game_word)
    #     else:
    #         bot.send_message(message.chat.id, '–¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç')
#-----------------------------------------------------------------------------------------------------------------------


# –†–∞–∑–≤–µ—Ä—Ç–∫–∞ –∏–≥—Ä—ã –∫—Ä–æ–∫–æ–¥–∏–ª–∞----------------------------------------------------------------------------------------------
async def crocodile_game(callback: types.CallbackQuery):
    pass
#-----------------------------------------------------------------------------------------------------------------------


#–†–∞–∑–≤–µ—Ä—Ç–∫–∞ –≥—Ä–∞–º–∞—Ç–∏–∫–∏----------------------------------------------------------------------------------------------------
#     # elif message.text == 'üìù Grammar':
#     #     item1 = types.KeyboardButton('üï∞Ô∏è Time')
#     #     item2 = types.KeyboardButton('üëÆ‚Äç‚ôÇ Rules')
#     #     item3 = types.KeyboardButton('‚¨Ö Back to menu')
#     #     markup = types.ReplyKeyboardMarkup()
#     #     markup.add(item1, item2, item3)
#     #     await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–º–∞—Ç–∏–∫–∏', reply_markup=markup)
#
#     elif message.text == 'üï∞Ô∏è Time':
#         item1 = types.KeyboardButton('‚è≥Present simple')
#         item2 = types.KeyboardButton('‚åöPresent continuous')
#         item3 = types.KeyboardButton('‚è∞Present perfect')
#         item4 = types.KeyboardButton('üîûPast simple')
#         item5 = types.KeyboardButton('‚¨Ö Back to menu')
#         markup = types.ReplyKeyboardMarkup()
#         markup.add(item1, item2, item3, item4, item5)
#         await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏', reply_markup=markup)
#
#     elif message.text == 'üëÆ‚Äç‚ôÇ Rules':
#         item1 = types.KeyboardButton('1')
#         item2 = types.KeyboardButton('2')
#         item3 = types.KeyboardButton('3')
#         item4 = types.KeyboardButton('4')
#         item5 = types.KeyboardButton('‚¨Ö Back to menu')
#         markup = types.ReplyKeyboardMarkup()
#         markup.add(item1, item2, item3, item4, item5)
#         await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏', reply_markup=markup)
# #---------------------------------------------------------------------------------------------------------------------
#
# #–†–∞–∑–≤–µ—Ä—Ç–∫–∞ —Å—Å—ã–ª–æ–∫-----------------------------------------------------------------------------------------------------
#     elif message.text == '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏':
#         bot.send_message(message.chat.id, '–°—Å—ã–ª–∫–∏')
# #---------------------------------------------------------------------------------------------------------------------
#
#
# #–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é-----------------------------------------------------------------------------------------------
#     if message.text == '‚¨Ö Back to menu':
#         await send_menu(message) #comand
# #---------------------------------------------------------------------------------------------------------------------


def expanded_game_f(dp: Dispatcher):
    dp.register_callback_query_handler(game_menu,text='game_menu')
    dp.register_callback_query_handler(word_game, text='word_game')
    dp.register_callback_query_handler(head_word_game, text='head_word_game')
    dp.register_callback_query_handler(crocodile_game, text='crocodile')
    dp.register_message_handler(start_words_game,state=test.test1)
    # dp.register_message_handler(body_words_game, state=test.test2)
