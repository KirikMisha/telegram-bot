from config import bot, Dispatcher
from aiogram import types


#–†–∞–∑–≤–µ—Ä—Ç–∫–∞ –º–µ–Ω—é –∏–≥—Ä-----------------------------------------------------------------------------------------------------
async def Game(message: types.Message):
    item1 = types.KeyboardButton('üêä Crocodile')
    item2 = types.KeyboardButton('Word Game')
    item3 = types.KeyboardButton('‚¨Ö Back to menu')
    markup = types.ReplyKeyboardMarkup()
    markup.add(item1, item2, item3)
    await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä', reply_markup=markup)
#-----------------------------------------------------------------------------------------------------------------------


# #–ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞-----------------------------------------------------------------------------------------------------------
# async def word_game(message: types.Message):
#     pass
# #-----------------------------------------------------------------------------------------------------------------------
#
#
# #–†–∞–∑–≤–µ—Ä—Ç–∫–∞ –∏–≥—Ä----------------------------------------------------------------------------------------------------------
# async def crocodile(message: types.Message):
#     pass
# #-----------------------------------------------------------------------------------------------------------------------




# async def expanded_menu(message: types.Message):
#–†–∞–∑–≤–µ—Ä—Ç–∫–∞ –≥—Ä–∞–º–∞—Ç–∏–∫–∏----------------------------------------------------------------------------------------------------
#     # elif message.text == 'üìù Grammar':
#     #     item1 = types.KeyboardButton('üï∞Ô∏è Time')
#     #     item2 = types.KeyboardButton('üëÆ‚Äç‚ôÇ Rules')
#     #     item3 = types.KeyboardButton('‚¨Ö Back to menu')
#     #     markup = types.ReplyKeyboardMarkup()
#     #     markup.add(item1, item2, item3)
#     #     await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–º–∞—Ç–∏–∫–∏', reply_markup=markup)
#
#     elif message.text == 'üï∞Ô∏è Time':
#         item1 = types.KeyboardButton('‚è≥Present simple')
#         item2 = types.KeyboardButton('‚åöPresent continuous')
#         item3 = types.KeyboardButton('‚è∞Present perfect')
#         item4 = types.KeyboardButton('üîûPast simple')
#         item5 = types.KeyboardButton('‚¨Ö Back to menu')
#         markup = types.ReplyKeyboardMarkup()
#         markup.add(item1, item2, item3, item4, item5)
#         await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏', reply_markup=markup)
#
#     elif message.text == 'üëÆ‚Äç‚ôÇ Rules':
#         item1 = types.KeyboardButton('1')
#         item2 = types.KeyboardButton('2')
#         item3 = types.KeyboardButton('3')
#         item4 = types.KeyboardButton('4')
#         item5 = types.KeyboardButton('‚¨Ö Back to menu')
#         markup = types.ReplyKeyboardMarkup()
#         markup.add(item1, item2, item3, item4, item5)
#         await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏', reply_markup=markup)
# #-----------------------------------------------------------------------------------------------------------------------
#
#
#
#
# #–†–∞–∑–≤–µ—Ä—Ç–∫–∞ —Å—Å—ã–ª–æ–∫-------------------------------------------------------------------------------------------------------
#     elif message.text == '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏':
#         bot.send_message(message.chat.id, '–°—Å—ã–ª–∫–∏')
# #-----------------------------------------------------------------------------------------------------------------------
#
#
# #–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é-------------------------------------------------------------------------------------------------
#     if message.text == '‚¨Ö Back to menu':
#         await send_menu(message) #comand
# #-----------------------------------------------------------------------------------------------------------------------


def expanded_game_f(dp: Dispatcher):
    dp.register_callback_query_handler(Game,text='üïπÔ∏è Game')
