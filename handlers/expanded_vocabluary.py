from aiogram.dispatcher import FSMContext
from config import bot, Dispatcher, dp
from aiogram import types
from db import Plass, Restart_ordinary_words
from aiogram.dispatcher.filters.state import State, StatesGroup


class how_many_words(StatesGroup):
    test1 = State()
    test2 = State()
    test3 = State()


with open('./Vocabulary/Ordinary_words.txt', encoding='utf-8') as inp:
    Owords = inp.readlines()


# –†–∞–∑–≤–µ—Ä—Ç–∫–∞ –º–µ–Ω—é —Å—Ç—Ä–æ–∫---------------------------------------------------------------------------------------------------
async def vocabulary(message: types.Message):
    item1 = types.KeyboardButton('üìö Ordinary words')
    item2 = types.KeyboardButton('üìñ Irregular verbs')
    item3 = types.KeyboardButton('üíÅ‚Äç‚ôÇ Basic stable expressions')
    item4 = types.KeyboardButton('‚¨Ö Back to menu')
    markup = types.ReplyKeyboardMarkup()
    markup.add(item1, item2, item3, item4)
    await bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤', reply_markup=markup)


#-----------------------------------------------------------------------------------------------------------------------


#–í—ã–≤–æ–¥ –æ–±—ã—á–Ω—ã—Ö —Å–ª–æ–≤-----------------------------------------------------------------------------------------------------
async def ordinary_words(message: types.Message):
    item1 = types.KeyboardButton('üìó 1')
    item2 = types.KeyboardButton('üìó 5')
    item3 = types.KeyboardButton('üìó 10')
    item4 = types.KeyboardButton('‚¨Ö Back to menu')
    markup = types.ReplyKeyboardMarkup()
    markup.add(item1, item2, item3, item4)
    await bot.send_message(message.chat.id, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —è —Ç–µ–±–µ –≤—ã–¥–∞–º –Ω–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ '
                                            '—Å–µ–≥–æ–¥–Ω—è.–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –±—É–¥–µ—Ç —É—á–∏—Ç—å –ø–æ 5-10 —Å–ª–æ–≤ –≤ –¥–µ–Ω—å, –æ–¥–Ω–∞–∫–æ '
                                            '–≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–º –¥–µ–ª–µ, —É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ-—ç—Ç–æ —É–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å.\n'
                                            'p.s. ( –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç üìó *–ø—Ä–æ–±–µ–ª* '
                                            '—Ü–∏—Ñ—Ä–∞)\np.p.s. (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –≤–±–µ–π –∫–æ–º–∞–Ω–¥—É: üìó '
                                            'Restart)'
                                            '', reply_markup=markup)
    await how_many_words.test1.set()


@dp.message_handler(state=how_many_words.test1)
async def ordinary(message: types.Message):
    if message.text[0] == 'üìô':
        if message.text.replace('üìó ', '').isdigit():
            number = int(message.text.replace('üìó ', ''))
            i = Plass(message, number)
            number = i + number
            while i < number:
                i = i + 1
                bot.send_message(message.chat.id, Owords[i])
                if i == 1415:
                    await bot.send_message(message.chat.id, '–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –≤—ã—É—á–∏–ª –≤–µ—Å—å –ê–Ω–≥–ª–∏–π—Å–∫–∏–π )')
                    await bot.send_photo(message.chat.id,
                                         'http://risovach.ru/upload/2014/03/mem/forever-alone_46449071_orig_.jpg')
                    await Restart_ordinary_words(message)
                    break
        else:
            await bot.send_message(message.chat.id, 'Enter a number\n'
                                                    'Example:üìó [number]')


#-----------------------------------------------------------------------------------------------------------------------


#–í—ã–≤–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤--------------------------------------------------------------------------------------------
async def irregular_verbs(message: types.Message):
    item1 = types.KeyboardButton('üìï 1')
    item2 = types.KeyboardButton('üìï 3')
    item3 = types.KeyboardButton('üìï 5')
    item4 = types.KeyboardButton('‚¨Ö Back to menu')
    markup = types.ReplyKeyboardMarkup()
    markup.add(item1, item2, item3, item4)
    await bot.send_message(message.chat.id, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Å–∫–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ —è —Ç–µ–±–µ '
                                            '–≤—ã–¥–∞–º –Ω–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –±—É–¥–µ—Ç —É—á–∏—Ç—å –ø–æ 5-10 '
                                            '—Å–ª–æ–≤ –≤ –¥–µ–Ω—å, –æ–¥–Ω–∞–∫–æ –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–º –¥–µ–ª–µ, —É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ-—ç—Ç–æ '
                                            '—É–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å.\np.s. ( –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –Ω–∞–ø–∏—à–∏ –≤ '
                                            '—á–∞—Ç üìï *–ø—Ä–æ–±–µ–ª* —Ü–∏—Ñ—Ä–∞)p.p.s. (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –≤–±–µ–π '
                                            '–∫–æ–º–∞–Ω–¥—É: üìï Restart)'
                                            '', reply_markup=markup)


# ----------------------------------------------------------------------------------------------------------------------


# –í—ã–≤–æ–¥ –±–∞–∑–æ–≤—ã—Ö —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π------------------------------------------------------------------------------------
async def basic_stable_expressions(message: types.Message):
    item1 = types.KeyboardButton('üìô 1')
    item2 = types.KeyboardButton('üìô 3')
    item3 = types.KeyboardButton('üìô 5')
    item4 = types.KeyboardButton('‚¨Ö Back to menu')
    markup = types.ReplyKeyboardMarkup()
    markup.add(item1, item2, item3, item4)
    await bot.send_message(message.chat.id, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π '
                                            '–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —è —Ç–µ–±–µ –≤—ã–¥–∞–º –Ω–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–º '
                                            '–≤–∞—Ä–∏–∞–Ω—Ç–æ–º –±—É–¥–µ—Ç —É—á–∏—Ç—å –ø–æ 5-10 —Å–ª–æ–≤ –≤ –¥–µ–Ω—å, –æ–¥–Ω–∞–∫–æ –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–º '
                                            '–¥–µ–ª–µ, —É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ-—ç—Ç–æ —É–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å.\np.s. ( –ø—Ä–∏ –≤—ã–±–æ—Ä–µ '
                                            '–∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç üìô *–ø—Ä–æ–±–µ–ª* —Ü–∏—Ñ—Ä–∞)p.p.s. (–µ—Å–ª–∏ '
                                            '—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –≤–±–µ–π –∫–æ–º–∞–Ω–¥—É: üìô Restart)'
                                            '', reply_markup=markup)


#-----------------------------------------------------------------------------------------------------------------------


def expanded_vocabulary_f(dp: Dispatcher):
    dp.register_callback_query_handler(vocabulary, text='üìö Vocabulary')
    dp.register_callback_query_handler(ordinary_words, text='üìö Ordinary words')
    dp.register_callback_query_handler(irregular_verbs, text='üìñ Irregular verbs')
    dp.register_callback_query_handler(basic_stable_expressions, text='üíÅ‚Äç‚ôÇ Basic stable expressions')
